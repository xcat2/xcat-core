export XCATDEBUGMODE="#TABLEBLANKOKAY:site:key=xcatdebugmode:value#"
if [ "$XCATDEBUGMODE" = "1" ] || [ "$XCATDEBUGMODE" = "2" ]; then
    set -x
fi

if grep n8r /proc/cmdline > /dev/null 2>&1;
then
  stty crtscts
fi
for x in 0 1 2 3 4 5 6 7 8
do
	mknod /dev/vcs$x c 7 $x
	mknod /dev/vcsa$x c 7 $[$x+128]
done
chmod 644 /dev/vcs*
chown root /dev/vcs*
if [ -r /tmp/updates/etc/pki/tls/certs/ca-bundle.crt ]; then
        cp -f /tmp/updates/etc/pki/tls/certs/ca-bundle.crt /etc/pki/tls/certs/
fi



cat >/tmp/baz.py <<EOF
#!/usr/bin/python
import socket
import sys

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('#XCATVAR:XCATMASTER#',#TABLE:site:key=xcatiport:value#))

print sys.argv[1]
response = sock.recv(100)
if(response == "ready\n"):
        sock.send(sys.argv[1]+"\n")
        response = sock.recv(100)

sock.close()
EOF



cat >/tmp/foo.py <<EOF
#!/usr/bin/python

import socket
import os
import linecache
import re

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('#XCATVAR:XCATMASTER#',#TABLE:site:key=xcatiport:value#))

response = sock.recv(100)
if(response == "ready\n"):
	sock.send("installmonitor\n")
	response = sock.recv(100)

sock.close()

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

port = 3001
sock.bind(('', port))

sock.listen(5)

try:
	while 1:
		newSocket, address = sock.accept()
		while 1:
			received = newSocket.recv(200)
			if not received:
				break
			command = re.split('\s+',received)
			if(command[0] == "stat"):
				ilog = ""
				line = ""
				post = 0
				percent = 0
				count = 0
				numpack = 0
				pre = 0
				if(os.path.isfile('/tmp/xcatpre.log')):
					ilog = '/tmp/xcatpre.log'
					pre = 1
				if(os.path.isfile('/tmp/packaging.log')):
					ilog = '/tmp/packaging.log'
				if(os.path.isfile('/mnt/sysimage/tmp/post.log')):
					ilog = '/mnt/sysimage/tmp/post.log'
					post = True
				if(ilog):
					count = len(open(ilog).readlines())
					line = linecache.getline(ilog,count)
					linecache.clearcache()
				if(line and not post and not pre):
					r2 = re.compile("Installing ([^ ]*) \((\d+)/(\d+)\)")
					m2 = r2.search(line)
					if m2:
						newline = "%s (%.2f%%)" % (m2.group(1), 100 * float(m2.group(2)) / float(m2.group(3)))
					else:
						newline = "post"
					line = "installing " + newline
				if(line and post and not pre):
					line = "installing " + line
				if(not line):
					line = "installing prep"
				newSocket.send(line)
				break
#UNCOMMENTOENABLEDEBUGPORT#			if(command[0] == "sh"): #DEBUG purposes only, wide open root priv command here.
#UNCOMMENTOENABLEDEBUGPORT#				newcommand = ""
#UNCOMMENTOENABLEDEBUGPORT#				for i in command[1:]:
#UNCOMMENTOENABLEDEBUGPORT#					newcommand = newcommand + i + " "
#UNCOMMENTOENABLEDEBUGPORT#				output = os.popen(newcommand).read()
#UNCOMMENTOENABLEDEBUGPORT#				newSocket.send(output)
#UNCOMMENTOENABLEDEBUGPORT#				break
			if(command[0] == "screendump"):
				newcommand = "cat /dev/vcs"
				for i in command[1:]:
					newcommand = newcommand + i
				output = os.popen(newcommand).read()
				newSocket.send(output)
				break
				
		newSocket.close()

finally:
	sock.close()
EOF

chmod 755 /tmp/foo.py
chmod 755 /tmp/baz.py

NODESTATUS=#TABLEBLANKOKAY:site:key=nodestatus:value#

if [ -z "$NODESTATUS" ] || [ "$NODESTATUS" != "0" -a   "$NODESTATUS" != "N"  -a  "$NODESTATUS" != "n" ]; then
   /tmp/baz.py "installstatus installing" &
fi



/tmp/foo.py >/foo.log 2>&1 &



#time to ascertain fstype and PReP/UEFI/legacy
#also, find first available block device (sda or vda likely)
#TODO: pick a likely non-SAN target if possible
shopt -s nullglob

#The script getinstdisk is common for rh/sles/pkvm/ubuntu, it will write the install_disk into /tmp/install_disk file
#INCLUDE:#ENV:XCATROOT#/share/xcat/install/scripts/getinstdisk#
if [ -e "/tmp/install_disk" ]; then
    instdisk=`cat /tmp/install_disk`
fi

# Could not determine the install disk for whatever reason,
# try the default /dev/sda
if [ -z "$instdisk" ]; then
    instdisk="/dev/sda"
fi

modprobe ext4 >& /dev/null
modprobe ext4dev >& /dev/null
if grep ext4dev /proc/filesystems > /dev/null; then
	FSTYPE=ext3
elif grep ext4 /proc/filesystems > /dev/null; then
	FSTYPE=ext4
else
	FSTYPE=ext3
fi
BOOTFSTYPE=ext3
EFIFSTYPE=vfat

if uname -r|grep -q '^3.*el7'; then
    BOOTFSTYPE=xfs
    FSTYPE=xfs
    EFIFSTYPE=efi
fi

if [ `uname -m` = "ppc64" -o `uname -m` = "ppc64le" ]; then
	echo 'part None --fstype "PPC PReP Boot" --ondisk '$instdisk' --size 8' >> /tmp/partitioning 
fi
if [ -d /sys/firmware/efi ]; then 
	echo 'part /boot/efi --size 50 --ondisk '$instdisk' --fstype '$EFIFSTYPE >> /tmp/partitioning
fi

#TODO: ondisk detection, /dev/disk/by-id/edd-int13_dev80 for legacy maybe, and no idea about efi.  at least maybe blacklist SAN if mptsas/mpt2sas/megaraid_sas seen...
echo "part /boot --size 256 --fstype $BOOTFSTYPE --ondisk $instdisk" >> /tmp/partitioning
echo "part swap --recommended --ondisk $instdisk" >> /tmp/partitioning
echo "part pv.01 --size 1 --grow --ondisk $instdisk" >> /tmp/partitioning
echo "volgroup system pv.01" >> /tmp/partitioning
echo "logvol / --vgname=system --name=root --size 1 --grow --fstype $FSTYPE" >> /tmp/partitioning

#specify "bootloader" configuration in "/tmp/partitioning" if there is no user customized partition file
BOOTLOADER="bootloader "

#specify the kernel options which will be persistent after installation
[ -n "#ENV:PERSKCMDLINE#" ] && BOOTLOADER=$BOOTLOADER" --append=#ENV:PERSKCMDLINE#"

#Specifies which drive the boot loader should be written to
#and therefore which drive the computer will boot from.
[ -n "$instdisk" ] && BOOTLOADER=$BOOTLOADER" --boot-drive=$(basename $instdisk)"

echo "$BOOTLOADER" >> /tmp/partitioning
	
#XCA_PARTITION_SCRIPT#


# The following code is to generate the repository for the installation
cat /proc/cmdline

NEXTSERVER=`cat /proc/cmdline | grep http | head -n 1`
NEXTSERVER=${NEXTSERVER#*http://}
NEXTSERVER=${NEXTSERVER%%:*}

export nextserver=$NEXTSERVER
#INSTALL_SOURCES_IN_PRE#

if [ "$XCATDEBUGMODE" = "1" ] || [ "$XCATDEBUGMODE" = "2" ]; then
    set +x
fi
