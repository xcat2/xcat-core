        <post-scripts config:type="list">
            <script>
                <filename>post.sh</filename>
                <interpreter>shell</interpreter>
                <source>
<![CDATA[
#!/bin/sh

# Set MAC address
cat /etc/sysconfig/network/ifcfg-replace_device | grep -v "LLADDR" | grep -v "UNIQUE" > /tmp/ifcfg-replace_device
echo "LLADDR='replace_lladdr'" >> /tmp/ifcfg-replace_device
echo "UNIQUE=''" >> /tmp/ifcfg-replace_device
echo "NAME='OSA Express Network card (replace_nic_addr)'" >> /tmp/ifcfg-replace_device
cat /tmp/ifcfg-replace_device > /etc/sysconfig/network/ifcfg-replace_device                    

# Get node hostname
HOSTNAME=$(hostname -s)

# These variables are set by nodeset
export MASTER_IPS=( replace_master )
export MASTER=replace_master
export INSTALLDIR=replace_install_dir
if [ -z "$INSTALLDIR" ]; then
    INSTALLDIR="/install"
fi

for t in $(seq 1 20)
do
    GOTIT=0
    
    # Loop through the master/service nodes
    for i in $MASTER_IPS
    do
        # Download postscripts from FTP server
        wget -l inf -N -r --waitretry=10 --random-wait --retry-connrefused  -e robots=off -nH --cut-dirs=2 --reject "index.html*" --no-parent -t 0 -T 60 http://$i$INSTALLDIR/postscripts/ -P /xcatpost
        if [ "$?" = "0" ]; then
            # Exit if openssl is not executable
            if [ ! -x /usr/bin/openssl ]; then 
                        exit 1
            fi
        
            # Get xcat server
            XCATSERVER=$i:3001
            export XCATSERVER
            USEOPENSSLFORXCAT=1 
            export USEOPENSSLFORXCAT

            # Move postscritps into /xcatpost
            mv $i/postscripts /xcatpost
            # Remove postscritps
            rm -rf $i
            # Make postscripts executable
            chmod +x /xcatpost/*

            # Get postscript to run on this node from xcat server
            /xcatpost/getpostscript.awk |sed -e 's/<[^>]*>//g'|egrep -v '^ *$'|sed -e 's/^ *//' > /tmp/mypostscript
            MYCONT=`grep MASTER /tmp/mypostscript`
            MAX_RETRIES=10
            RETRY=0
            while [ -z "$MYCONT" ]; do
                RETRY=$(($RETRY+1))
                if [ $RETRY -eq $MAX_RETRIES ]; then
                    break
                fi

                # Sleep a couple of seconds before trying again            
                let SLI=$RANDOM%10+10
                sleep $SLI

                # Get postscript to run on this node from xcat server
                /xcatpost/getpostscript.awk |sed -e 's/<[^>]*>//g'|egrep -v '^ *$'|sed -e 's/^ *//' > /tmp/mypostscript
                MYCONT=`grep MASTER /tmp/mypostscript`
            done
         
            # Make executable
            chmod +x /tmp/mypostscript
            GOTIT=1
            break
        fi
    done
    
    # If postscripts for this node are found
    if [ "$GOTIT" = "1" ]; then
        # Save the master/service node to /opt/xcat/xcatinfo file
        if [ ! -f /opt/xcat/xcatinfo ]; then
            mkdir -p /opt/xcat
            touch /opt/xcat/xcatinfo
        fi

        echo "XCATSERVER=$i" > /opt/xcat/xcatinfo
        echo "REBOOT=TRUE" >> /opt/xcat/xcatinfo
        break
    fi

    # Sleep for a couple of seconds
    RAND=$(perl -e 'print int(rand(5)). "\n"')
    sleep $RAND
done

PATH=$PATH:/xcatpost
export PATH

# use the run_ps subroutine to run the postscripts
TMP=`sed "/postscripts-start-here/,/postscripts-end-here/ s/\(.*\)/run_ps postscript \1/;s/run_ps postscript\s*#/#/;s/run_ps postscript\s*$//" /tmp/mypostscript`
echo "
# subroutine used to run postscripts
# \$1 argument is the script type
# rest argument is the script name and arguments
run_ps () {
 logdir=\"/var/log/xcat\"
 mkdir -p \$logdir
 logfile=\"/var/log/xcat/xcat.log\"
 scriptype=\$1
 shift;

 if [ -z \"\$scriptype\" ]; then
  scriptype=\"postscript\"
 fi
 
 if [ -f \$1 ]; then 
  echo \"Running \$scriptype: \$1\" | tee -a \$logfile
  ./\$@ 2>&1 1> /tmp/tmp4xcatlog
  cat /tmp/tmp4xcatlog | tee -a \$logfile
 else
  echo \"\$scriptype \$1 does NOT exist.\" | tee -a \$logfile
 fi
}
# subroutine end

" > /tmp/mypostscript
echo "cd /xcatpost" >> /tmp/mypostscript
echo "$TMP" >> /tmp/mypostscript
TMP=`sed "/postbootscripts-start-here/,/postbootscripts-end-here/ s/\(.*\)/run_ps postbootscript \1/;s/run_ps postbootscript\s*#/#/;s/run_ps postbootscript\s*$//" /tmp/mypostscript`
echo "$TMP" > /tmp/mypostscript 


# Save post boot scripts to /tmp/mypostscript.post
TMP=`sed "/postscripts-start-here/,/postscripts-end-here/ d" /tmp/mypostscript`
echo "$TMP" > /tmp/mypostscript.post
chmod 755 /tmp/mypostscript.post

# Create post init
cat >/etc/init.d/xcatpostinit1 << 'EOF'
# Copy the contents of /install/postscripts/xcatpostinit1 here
replace_xcatpostinit1
EOF
# Change permissions
chmod 755 /etc/init.d/xcatpostinit1
ln -s /etc/init.d/xcatpostinit1 /etc/init.d/rc3.d/S84xcatpostinit1
ln -s /etc/init.d/xcatpostinit1 /etc/init.d/rc4.d/S84xcatpostinit1
ln -s /etc/init.d/xcatpostinit1 /etc/init.d/rc5.d/S84xcatpostinit1

# Create post install 
mkdir -p /opt/xcat
cat >/opt/xcat/xcatinstallpost << 'EOF'
# Copy the contents of /install/postscripts/xcatinstallpost here
replace_xcatinstallpost

if [ -f /xcatpost/mypostscript.post ]; then
    RUNBOOTSCRIPTS=`grep 'RUNBOOTSCRIPTS=' /xcatpost/mypostscript.post |cut -d= -f2`
fi
if [ "$RUNBOOTSCRIPTS" != "'yes'" ]; then
    chkconfig xcatpostinit1 off
fi
echo "REBOOT=TRUE" >> /opt/xcat/xcatinf
EOF
# Change permissions
chmod 755 /opt/xcat/xcatinstallpost

chkconfig --add xcatpostinit1

#create the dskls post 
cat >/opt/xcat/xcatdsklspost << 'EOF'
#INCLUDE:#TABLE:site:key=installdir:value#/postscripts/xcatdsklspost#
EOF
chmod 755 /opt/xcat/xcatdsklspost

# Only run prebooot scripts here
TMP=`sed "/postbootscripts-start-here/,/postbootscripts-end-here/ d" /tmp/mypostscript`
echo "$TMP" > /tmp/mypostscript

# Run postscripts
/tmp/mypostscript

# Master node is set by nodeset
updateflag.awk $MASTER 3002
cd /
]]>
                </source>
            </script>
        </post-scripts>
